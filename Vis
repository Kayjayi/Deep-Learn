import os
import cv2
import numpy as np

def visualize_detections(image, detections):
    for detection in detections:
        class_id, confidence, x, y, w, h, mask = detection
        color = (0, 255, 0)  # Green color for bounding boxes
        label = f"Class: {class_id}, Confidence: {confidence:.2f}"
        cv2.rectangle(image, (int(x), int(y)), (int(x + w), int(y + h)), color, 2)
        cv2.putText(image, label, (int(x), int(y - 10)), cv2.FONT_HERSHEY_SIMPLEX, 0.5, color, 2)
        
        # Draw segmentation mask
        mask = np.array(mask, dtype=np.uint8)
        mask = cv2.resize(mask, (w, h))
        mask = cv2.cvtColor(mask, cv2.COLOR_GRAY2BGR)
        mask = mask * color  # Apply color to the mask
        image[y:y+h, x:x+w] = cv2.addWeighted(image[y:y+h, x:x+w], 0.5, mask, 0.5, 0)

# Input and output folder paths
input_folder = 'input_images_folder'
output_folder = 'output_images_folder'

# Create output folder if it doesn't exist
if not os.path.exists(output_folder):
    os.makedirs(output_folder)

# Loop through images in the input folder
for filename in os.listdir(input_folder):
    if filename.endswith(('.jpg', '.jpeg', '.png')):  # Check if the file is an image
        # Load image
        image_path = os.path.join(input_folder, filename)
        image = cv2.imread(image_path)

        # Dummy detection results (class_id, confidence, x, y, w, h, mask)
        detections = [(0, 0.9, 100, 100, 50, 50, np.random.randint(0, 2, (50, 50))) for _ in range(2)]

        # Visualize detections
        visualize_detections(image, detections)

        # Save the visualized image to the output folder
        output_image_path = os.path.join(output_folder, filename)
        cv2.imwrite(output_image_path, image)

        print(f"Visualized image saved at: {output_image_path}")


import os
import cv2
import numpy as np

def visualize_detections(image, detections):
    for detection in detections:
        class_id, confidence, x, y, w, h, mask = detection
        color = (0, 255, 0)  # Green color for bounding boxes
        label = "Class: {}, Confidence: {:.2f}".format(class_id, confidence)
        cv2.rectangle(image, (int(x), int(y)), (int(x + w), int(y + h)), color, 2)
        cv2.putText(image, label, (int(x), int(y - 10)), cv2.FONT_HERSHEY_SIMPLEX, 0.5, color, 2)
        
        # Ensure mask is a numpy array
        mask = np.array(mask, dtype=np.uint8) if mask is not None else None
        
        if mask is not None:
            # Draw segmentation mask
            mask = cv2.resize(mask, (w, h))
            mask = cv2.cvtColor(mask, cv2.COLOR_GRAY2BGR)
            mask = mask * color  # Apply color to the mask
            image[y:y+h, x:x+w] = cv2.addWeighted(image[y:y+h, x:x+w], 0.5, mask, 0.5, 0)

# Input and output folder paths
input_folder = 'input_images_folder'
output_folder = 'output_images_folder'

# Create output folder if it doesn't exist
if not os.path.exists(output_folder):
    os.makedirs(output_folder)

# Loop through images in the input folder
for filename in os.listdir(input_folder):
    if filename.endswith(('.jpg', '.jpeg', '.png')):  # Check if the file is an image
        # Load image
        image_path = os.path.join(input_folder, filename)
        image = cv2.imread(image_path)

        # Dummy detection results (class_id, confidence, x, y, w, h, mask)
        detections = [(0, 0.9, 100, 100, 50, 50, np.random.randint(0, 2, (50, 50))) for _ in range(2)]

        # Visualize detections
        visualize_detections(image, detections)

        # Save the visualized image to the output folder
        output_image_path = os.path.join(output_folder, filename)
        cv2.imwrite(output_image_path, image)

        print(f"Visualized image saved at: {output_image_path}")


from PIL import Image, ImageEnhance

def brightness(image_path):
    img = Image.open(image_path)
    enhancer = ImageEnhance.Brightness(img)
    brightness_level = enhancer.enhance(1.0)
    return brightness_level

def adjust_brightness(image_path, factor):
    img = Image.open(image_path)
    enhancer = ImageEnhance.Brightness(img)
    adjusted_img = enhancer.enhance(factor)
    adjusted_img.show()  # Display adjusted image
    return adjusted_img

# Example usage:
image_path = "example.jpg"
brightness_level = brightness(image_path)
print("Brightness level:", brightness_level)

# Adjust brightness by a factor (1.0 means no change, less than 1.0 makes it darker, more than 1.0 makes it brighter)
adjusted_img = adjust_brightness(image_path, 1.5)  # Example: Increase brightness by 50%


from PIL import Image, ImageEnhance

def adjust_brightness(image_path, factor):
    img = Image.open(image_path)
    enhancer = ImageEnhance.Brightness(img)
    adjusted_img = enhancer.enhance(factor)
    return adjusted_img

def adjust_exposure(image_path, factor):
    img = Image.open(image_path)
    enhancer = ImageEnhance.Contrast(img)
    adjusted_img = enhancer.enhance(factor)
    return adjusted_img

def save_image(image, output_path):
    image.save(output_path, format='JPEG')  # Save image with JPEG format
    image.show()  # Display image

# Example usage:
image_path = "example.jpg"
output_path_brightness = "adjusted_brightness.jpg"  # Output path for adjusted brightness image
output_path_exposure = "adjusted_exposure.jpg"  # Output path for adjusted exposure image

# Adjust brightness
adjusted_brightness_img = adjust_brightness(image_path, 1.5)  # Example: Increase brightness by 50%
save_image(adjusted_brightness_img, output_path_brightness)

# Adjust exposure
adjusted_exposure_img = adjust_exposure(image_path, 1.5)  # Example: Increase exposure by 50%
save_image(adjusted_exposure_img, output_path_exposure)

from PIL import Image, ImageEnhance

def enhance_image(image_path, output_path):
    # Open the image
    img = Image.open(image_path)
    
    # Adjust brightness
    brightness_factor = 1.2
    
    # Adjust exposure
    exposure_factor = 1.2
    
    # Adjust contrast
    contrast_factor = 1.2
    
    # Adjust saturation
    saturation_factor = 1.2
    
    # Adjust sharpness
    sharpness_factor = 1.2
    
    # Enhance brightness
    enhancer = ImageEnhance.Brightness(img)
    img = enhancer.enhance(brightness_factor)
    
    # Enhance exposure
    enhancer = ImageEnhance.Contrast(img)
    img = enhancer.enhance(exposure_factor)
    
    # Enhance contrast
    enhancer = ImageEnhance.Contrast(img)
    img = enhancer.enhance(contrast_factor)
    
    # Enhance saturation
    enhancer = ImageEnhance.Color(img)
    img = enhancer.enhance(saturation_factor)
    
    # Enhance sharpness
    enhancer = ImageEnhance.Sharpness(img)
    img = enhancer.enhance(sharpness_factor)
    
    # Save the enhanced image
    img.save(output_path, format='JPEG')
    img.show()

# Example usage:
image_path = "example.jpg"
output_path = "enhanced_image.jpg"  # Output path for the enhanced image
enhance_image(image_path, output_path)

from PIL import Image, ImageFilter

def remove_grains(image_path, output_path):
    # Open the image
    img = Image.open(image_path)
    
    # Apply Gaussian blur filter to remove grains
    img_filtered = img.filter(ImageFilter.GaussianBlur(radius=2))
    
    # Save the filtered image
    img_filtered.save(output_path, format='JPEG')
    img_filtered.show()

# Example usage:
image_path = "example.jpg"
output_path = "grain_removed_image.jpg"  # Output path for the grain removed image
remove_grains(image_path, output_path)


from PIL import Image, ImageEnhance, ImageStat, ImageFilter

def analyze_image_properties(image_path):
    # Open the image
    img = Image.open(image_path)
    
    # Analyze brightness
    stat = ImageStat.Stat(img)
    brightness = stat.mean[0]
    
    # Analyze contrast
    contrast = stat.stddev[0]
    
    # Analyze saturation for the entire image
    enhancer = ImageEnhance.Color(img)
    saturation = enhancer.enhance(1).getpixel((img.width // 2, img.height // 2))[1]
    
    # Analyze sharpness
    sharpness_stat = ImageStat.Stat(img.filter(ImageFilter.SHARPEN))
    sharpness = sharpness_stat.mean[0]
    
    return brightness, contrast, saturation, sharpness

def enhance_image(image_path, output_path):
    # Analyze image properties
    brightness, contrast, saturation, sharpness = analyze_image_properties(image_path)
    
    # Define enhancement factors based on properties
    brightness_factor = 1.2 if brightness < 100 else 1.0
    exposure_factor = 1.2 if brightness < 100 else 1.0
    contrast_factor = 1.2 if contrast < 50 else 1.0
    saturation_factor = 1.2 if saturation < 100 else 1.0
    sharpness_factor = 1.2 if sharpness < 100 else 1.0
    
    # Open the image
    img = Image.open(image_path)
    
    # Enhance brightness
    enhancer = ImageEnhance.Brightness(img)
    img = enhancer.enhance(brightness_factor)
    
    # Enhance exposure
    enhancer = ImageEnhance.Contrast(img)
    img = enhancer.enhance(exposure_factor)
    
    # Enhance contrast
    enhancer = ImageEnhance.Contrast(img)
    img = enhancer.enhance(contrast_factor)
    
    # Enhance saturation
    enhancer = ImageEnhance.Color(img)
    img = enhancer.enhance(saturation_factor)
    
    # Enhance sharpness
    enhancer = ImageEnhance.Sharpness(img)
    img = enhancer.enhance(sharpness_factor)
    
    # Save the enhanced image
    img.save(output_path, format='JPEG')
    img.show()

# Example usage:
image_path = "example.jpg"
output_path = "enhanced_image.jpg"  # Output path for the enhanced image
enhance_image(image_path, output_path)
