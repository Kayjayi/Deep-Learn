import os
import cv2
import numpy as np

def visualize_detections(image, detections):
    for detection in detections:
        class_id, confidence, x, y, w, h, mask = detection
        color = (0, 255, 0)  # Green color for bounding boxes
        label = f"Class: {class_id}, Confidence: {confidence:.2f}"
        cv2.rectangle(image, (int(x), int(y)), (int(x + w), int(y + h)), color, 2)
        cv2.putText(image, label, (int(x), int(y - 10)), cv2.FONT_HERSHEY_SIMPLEX, 0.5, color, 2)
        
        # Draw segmentation mask
        mask = np.array(mask, dtype=np.uint8)
        mask = cv2.resize(mask, (w, h))
        mask = cv2.cvtColor(mask, cv2.COLOR_GRAY2BGR)
        mask = mask * color  # Apply color to the mask
        image[y:y+h, x:x+w] = cv2.addWeighted(image[y:y+h, x:x+w], 0.5, mask, 0.5, 0)

# Input and output folder paths
input_folder = 'input_images_folder'
output_folder = 'output_images_folder'

# Create output folder if it doesn't exist
if not os.path.exists(output_folder):
    os.makedirs(output_folder)

# Loop through images in the input folder
for filename in os.listdir(input_folder):
    if filename.endswith(('.jpg', '.jpeg', '.png')):  # Check if the file is an image
        # Load image
        image_path = os.path.join(input_folder, filename)
        image = cv2.imread(image_path)

        # Dummy detection results (class_id, confidence, x, y, w, h, mask)
        detections = [(0, 0.9, 100, 100, 50, 50, np.random.randint(0, 2, (50, 50))) for _ in range(2)]

        # Visualize detections
        visualize_detections(image, detections)

        # Save the visualized image to the output folder
        output_image_path = os.path.join(output_folder, filename)
        cv2.imwrite(output_image_path, image)

        print(f"Visualized image saved at: {output_image_path}")


import os
import cv2
import numpy as np

def visualize_detections(image, detections):
    for detection in detections:
        class_id, confidence, x, y, w, h, mask = detection
        color = (0, 255, 0)  # Green color for bounding boxes
        label = "Class: {}, Confidence: {:.2f}".format(class_id, confidence)
        cv2.rectangle(image, (int(x), int(y)), (int(x + w), int(y + h)), color, 2)
        cv2.putText(image, label, (int(x), int(y - 10)), cv2.FONT_HERSHEY_SIMPLEX, 0.5, color, 2)
        
        # Ensure mask is a numpy array
        mask = np.array(mask, dtype=np.uint8) if mask is not None else None
        
        if mask is not None:
            # Draw segmentation mask
            mask = cv2.resize(mask, (w, h))
            mask = cv2.cvtColor(mask, cv2.COLOR_GRAY2BGR)
            mask = mask * color  # Apply color to the mask
            image[y:y+h, x:x+w] = cv2.addWeighted(image[y:y+h, x:x+w], 0.5, mask, 0.5, 0)

# Input and output folder paths
input_folder = 'input_images_folder'
output_folder = 'output_images_folder'

# Create output folder if it doesn't exist
if not os.path.exists(output_folder):
    os.makedirs(output_folder)

# Loop through images in the input folder
for filename in os.listdir(input_folder):
    if filename.endswith(('.jpg', '.jpeg', '.png')):  # Check if the file is an image
        # Load image
        image_path = os.path.join(input_folder, filename)
        image = cv2.imread(image_path)

        # Dummy detection results (class_id, confidence, x, y, w, h, mask)
        detections = [(0, 0.9, 100, 100, 50, 50, np.random.randint(0, 2, (50, 50))) for _ in range(2)]

        # Visualize detections
        visualize_detections(image, detections)

        # Save the visualized image to the output folder
        output_image_path = os.path.join(output_folder, filename)
        cv2.imwrite(output_image_path, image)

        print(f"Visualized image saved at: {output_image_path}")
